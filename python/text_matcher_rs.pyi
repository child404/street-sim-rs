# TODO: add StreetMatcher stubs
from typing import List, Optional

class Candidate:
    def __init__(self, text: str, similarity: float, file_found: str): ...
    @property
    def text(self) -> str: ...
    @property
    def similarity(self) -> float: ...
    @property
    def file_found(self) -> str: ...

class TextMatcher:
    def __init__(self, sensitivity: float, keep: int): ...
    @property
    def sensitivity(self) -> float: ...
    @sensitivity.setter
    def sensitivity(self, value: float): ...
    @property
    def keep(self) -> int: ...
    @keep.setter
    def keep(self, value: int): ...
    def find_matches_in_file(
        self, text: str, file: str, is_first_let_eq: Optional[bool]
    ) -> List[Candidate]: ...
    @classmethod
    def find_matches_in_dir(
        cls,
        sens: float,
        keep: int,
        text: str,
        path_to_dir: str,
        num_of_threads: Optional[int],
        is_first_let_eq: Optional[bool],
    ) -> List[Candidate]: ...

class MatchedStreet:
    @property
    def street(self) -> Optional[str]: ...
    @property
    def file_found(self) -> Optional[str]: ...

class StreetMatcher:
    def __init__(
        self, sensitivity: Optional[float], file_sensitivity: Optional[float]
    ): ...
    @property
    def sensitivity(self) -> float: ...
    @sensitivity.setter
    def sensitivity(self, value: float): ...
    @property
    def file_sensitivity(self) -> float: ...
    @file_sensitivity.setter
    def file_sensitivity(self, value: float): ...
    def match_by_plz(self, street: str, plz: Optional[int]) -> MatchedStreet: ...
    def match_by_place(self, street: str, place: Optional[str]) -> MatchedStreet: ...
